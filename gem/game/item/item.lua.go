// Code generated by glua; DO NOT EDIT.
package item

import (
	"github.com/gemrs/gem/glua"
	lua "github.com/yuin/gopher-lua"
)

// Binditem generates a lua binding for item
func Binditem(L *lua.LState) {
	L.PreloadModule("gem.game.item", lBinditem)
}

// lBinditem generates the table for the item module
func lBinditem(L *lua.LState) int {
	mod := L.NewTable()

	lBindContainer(L, mod)

	lBindItemDefinition(L, mod)

	lBindItemStack(L, mod)

	L.Push(mod)
	return 1
}

func lBindContainer(L *lua.LState, mod *lua.LTable) {
	mt := L.NewTypeMetatable("item.Container")

	L.SetField(mt, "__call", L.NewFunction(lNewContainer))

	L.SetField(mt, "__index", L.SetFuncs(L.NewTable(), ContainerMethods))

	cls := L.NewUserData()
	L.SetField(mod, "Container", cls)
	L.SetMetatable(cls, mt)
	glua.RegisterType("item.Container", mt)
}

func lNewContainer(L *lua.LState) int {
	L.Remove(1)
	arg0Value := L.Get(1)
	arg0 := glua.FromLua(arg0Value).(int)
	L.Remove(1)
	retVal := NewContainer(arg0)
	L.Push(glua.ToLua(L, retVal))
	return 1

}

var ContainerMethods = map[string]lua.LGFunction{

	"capacity": lBindContainerCapacity,

	"find_stack_of": lBindContainerFindStackOf,

	"remove_all_from_slot": lBindContainerRemoveAllFromSlot,

	"remove_from_slot": lBindContainerRemoveFromSlot,

	"set_slot": lBindContainerSetSlot,

	"slot": lBindContainerSlot,

	"swap_slots": lBindContainerSwapSlots,
}

func lBindContainerCapacity(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Container)
	L.Remove(1)
	retVal := self.Capacity()
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindContainerFindStackOf(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Container)
	L.Remove(1)
	arg0Value := L.Get(1)
	arg0 := glua.FromLua(arg0Value).(int)
	L.Remove(1)
	retVal := self.FindStackOf(arg0)
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindContainerRemoveAllFromSlot(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Container)
	L.Remove(1)
	arg0Value := L.Get(1)
	arg0 := glua.FromLua(arg0Value).(int)
	L.Remove(1)
	retVal := self.RemoveAllFromSlot(arg0)
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindContainerRemoveFromSlot(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Container)
	L.Remove(1)
	arg0Value := L.Get(1)
	arg0 := glua.FromLua(arg0Value).(int)
	L.Remove(1)
	arg1Value := L.Get(1)
	arg1 := glua.FromLua(arg1Value).(int)
	L.Remove(1)
	retVal := self.RemoveFromSlot(arg0, arg1)
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindContainerSetSlot(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Container)
	L.Remove(1)
	arg0Value := L.Get(1)
	arg0 := glua.FromLua(arg0Value).(int)
	L.Remove(1)
	arg1Value := L.Get(1)
	arg1 := glua.FromLua(arg1Value).(*ItemStack)
	L.Remove(1)
	self.SetSlot(arg0, arg1)
	return 0

}

func lBindContainerSlot(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Container)
	L.Remove(1)
	arg0Value := L.Get(1)
	arg0 := glua.FromLua(arg0Value).(int)
	L.Remove(1)
	retVal := self.Slot(arg0)
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindContainerSwapSlots(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Container)
	L.Remove(1)
	arg0Value := L.Get(1)
	arg0 := glua.FromLua(arg0Value).(int)
	L.Remove(1)
	arg1Value := L.Get(1)
	arg1 := glua.FromLua(arg1Value).(int)
	L.Remove(1)
	self.SwapSlots(arg0, arg1)
	return 0

}

func lBindItemDefinition(L *lua.LState, mod *lua.LTable) {
	mt := L.NewTypeMetatable("item.ItemDefinition")

	L.SetField(mt, "__index", L.SetFuncs(L.NewTable(), ItemDefinitionMethods))

	cls := L.NewUserData()
	L.SetField(mod, "ItemDefinition", cls)
	L.SetMetatable(cls, mt)
	glua.RegisterType("item.ItemDefinition", mt)
}

var ItemDefinitionMethods = map[string]lua.LGFunction{}

func lBindItemStack(L *lua.LState, mod *lua.LTable) {
	mt := L.NewTypeMetatable("item.ItemStack")

	L.SetField(mt, "__call", L.NewFunction(lNewItemStack))

	L.SetField(mt, "__index", L.SetFuncs(L.NewTable(), ItemStackMethods))

	cls := L.NewUserData()
	L.SetField(mod, "ItemStack", cls)
	L.SetMetatable(cls, mt)
	glua.RegisterType("item.ItemStack", mt)
}

func lNewItemStack(L *lua.LState) int {
	L.Remove(1)
	arg0Value := L.Get(1)
	arg0 := glua.FromLua(arg0Value).(int)
	L.Remove(1)
	arg1Value := L.Get(1)
	arg1 := glua.FromLua(arg1Value).(int)
	L.Remove(1)
	retVal := NewItemStack(arg0, arg1)
	L.Push(glua.ToLua(L, retVal))
	return 1

}

var ItemStackMethods = map[string]lua.LGFunction{

	"count": lBindItemStackCount,

	"id": lBindItemStackId,
}

func lBindItemStackCount(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*ItemStack)
	L.Remove(1)
	retVal := self.Count()
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindItemStackId(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*ItemStack)
	L.Remove(1)
	retVal := self.Id()
	L.Push(glua.ToLua(L, retVal))
	return 1

}
