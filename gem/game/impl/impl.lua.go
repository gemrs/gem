// Code generated by glua; DO NOT EDIT.
package impl

import (
	"github.com/gemrs/gem/gem/auth"
	"github.com/gemrs/gem/gem/game/item"
	"github.com/gemrs/gem/gem/game/position"
	"github.com/gemrs/gem/gem/game/server"
	"github.com/gemrs/gem/gem/game/world"
	"github.com/gemrs/gem/gem/protocol"
	"github.com/gemrs/gem/glua"
	lua "github.com/yuin/gopher-lua"
)

// Bindimpl generates a lua binding for impl
func Bindimpl(L *lua.LState) {
	L.PreloadModule("gem.game.impl", lBindimpl)
}

// lBindimpl generates the table for the impl module
func lBindimpl(L *lua.LState) int {
	mod := L.NewTable()

	lBindClientConfig(L, mod)

	lBindGroundItem(L, mod)

	lBindPlayer(L, mod)

	lBindProfile(L, mod)

	lBindSkill(L, mod)

	lBindSkills(L, mod)

	L.Push(mod)
	return 1
}

func lBindClientConfig(L *lua.LState, mod *lua.LTable) {
	mt := L.NewTypeMetatable("impl.ClientConfig")

	L.SetField(mt, "__call", L.NewFunction(lNewClientConfig))

	L.SetField(mt, "__index", L.SetFuncs(L.NewTable(), ClientConfigMethods))

	cls := L.NewUserData()
	L.SetField(mod, "ClientConfig", cls)
	L.SetMetatable(cls, mt)
	glua.RegisterType("impl.ClientConfig", mt)
}

func lNewClientConfig(L *lua.LState) int {
	L.Remove(1)
	arg0Value := L.Get(1)
	arg0 := glua.FromLua(arg0Value).(*Player)
	L.Remove(1)
	retVal := NewClientConfig(arg0)
	L.Push(glua.ToLua(L, retVal))
	return 1

}

var ClientConfigMethods = map[string]lua.LGFunction{

	"set_tab_interface": lBindClientConfigSetTabInterface,

	"tab_interface": lBindClientConfigTabInterface,
}

func lBindClientConfigSetTabInterface(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*ClientConfig)
	L.Remove(1)
	arg0Value := L.Get(1)
	arg0 := glua.FromLua(arg0Value).(protocol.InterfaceTab)
	L.Remove(1)
	arg1Value := L.Get(1)
	arg1 := glua.FromLua(arg1Value).(int)
	L.Remove(1)
	self.SetTabInterface(arg0, arg1)
	return 0

}

func lBindClientConfigTabInterface(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*ClientConfig)
	L.Remove(1)
	arg0Value := L.Get(1)
	arg0 := glua.FromLua(arg0Value).(protocol.InterfaceTab)
	L.Remove(1)
	retVal := self.TabInterface(arg0)
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindGroundItem(L *lua.LState, mod *lua.LTable) {
	mt := L.NewTypeMetatable("impl.GroundItem")

	L.SetField(mt, "__call", L.NewFunction(lNewGroundItem))

	L.SetField(mt, "__index", L.SetFuncs(L.NewTable(), GroundItemMethods))

	cls := L.NewUserData()
	L.SetField(mod, "GroundItem", cls)
	L.SetMetatable(cls, mt)
	glua.RegisterType("impl.GroundItem", mt)
}

func lNewGroundItem(L *lua.LState) int {
	L.Remove(1)
	arg0Value := L.Get(1)
	arg0 := glua.FromLua(arg0Value).(*item.Stack)
	L.Remove(1)
	arg1Value := L.Get(1)
	arg1 := glua.FromLua(arg1Value).(*position.Absolute)
	L.Remove(1)
	arg2Value := L.Get(1)
	arg2 := glua.FromLua(arg2Value).(protocol.World)
	L.Remove(1)
	retVal := NewGroundItem(arg0, arg1, arg2)
	L.Push(glua.ToLua(L, retVal))
	return 1

}

var GroundItemMethods = map[string]lua.LGFunction{

	"definition": lBindGroundItemDefinition,

	"index": lBindGroundItemIndex,

	"item": lBindGroundItemItem,

	"position": lBindGroundItemPosition,
}

func lBindGroundItemDefinition(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*GroundItem)
	L.Remove(1)
	retVal := self.Definition()
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindGroundItemIndex(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*GroundItem)
	L.Remove(1)
	retVal := self.Index()
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindGroundItemItem(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*GroundItem)
	L.Remove(1)
	retVal := self.Item()
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindGroundItemPosition(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*GroundItem)
	L.Remove(1)
	retVal := self.Position()
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindPlayer(L *lua.LState, mod *lua.LTable) {
	mt := L.NewTypeMetatable("impl.Player")

	L.SetField(mt, "__call", L.NewFunction(lNewPlayer))

	L.SetField(mt, "__index", L.SetFuncs(L.NewTable(), PlayerMethods))

	cls := L.NewUserData()
	L.SetField(mod, "Player", cls)
	L.SetMetatable(cls, mt)
	glua.RegisterType("impl.Player", mt)
}

func lNewPlayer(L *lua.LState) int {
	L.Remove(1)
	arg0Value := L.Get(1)
	arg0 := glua.FromLua(arg0Value).(int)
	L.Remove(1)
	arg1Value := L.Get(1)
	arg1 := glua.FromLua(arg1Value).(*server.Connection)
	L.Remove(1)
	arg2Value := L.Get(1)
	arg2 := glua.FromLua(arg2Value).(*world.Instance)
	L.Remove(1)
	arg3Value := L.Get(1)
	arg3 := glua.FromLua(arg3Value).(auth.Provider)
	L.Remove(1)
	retVal := NewPlayer(arg0, arg1, arg2, arg3)
	L.Push(glua.ToLua(L, retVal))
	return 1

}

var PlayerMethods = map[string]lua.LGFunction{

	"client_config": lBindPlayerClientConfig,

	"disconnect": lBindPlayerDisconnect,

	"index": lBindPlayerIndex,

	"logger": lBindPlayerLogger,

	"profile": lBindPlayerProfile,

	"send_force_logout": lBindPlayerSendForceLogout,

	"send_message": lBindPlayerSendMessage,

	"send_skill": lBindPlayerSendSkill,

	"set_walk_destination": lBindPlayerSetWalkDestination,

	"warp": lBindPlayerWarp,
}

func lBindPlayerClientConfig(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Player)
	L.Remove(1)
	retVal := self.ClientConfig()
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindPlayerDisconnect(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Player)
	L.Remove(1)
	self.Disconnect()
	return 0

}

func lBindPlayerIndex(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Player)
	L.Remove(1)
	retVal := self.Index()
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindPlayerLogger(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Player)
	L.Remove(1)
	retVal := self.Logger()
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindPlayerProfile(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Player)
	L.Remove(1)
	retVal := self.Profile()
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindPlayerSendForceLogout(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Player)
	L.Remove(1)
	self.SendForceLogout()
	return 0

}

func lBindPlayerSendMessage(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Player)
	L.Remove(1)
	arg0Value := L.Get(1)
	arg0 := glua.FromLua(arg0Value).(string)
	L.Remove(1)
	self.SendMessage(arg0)
	return 0

}

func lBindPlayerSendSkill(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Player)
	L.Remove(1)
	arg0Value := L.Get(1)
	arg0 := glua.FromLua(arg0Value).(int)
	L.Remove(1)
	arg1Value := L.Get(1)
	arg1 := glua.FromLua(arg1Value).(int)
	L.Remove(1)
	arg2Value := L.Get(1)
	arg2 := glua.FromLua(arg2Value).(int)
	L.Remove(1)
	self.SendSkill(arg0, arg1, arg2)
	return 0

}

func lBindPlayerSetWalkDestination(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Player)
	L.Remove(1)
	arg0Value := L.Get(1)
	arg0 := glua.FromLua(arg0Value).(*position.Absolute)
	L.Remove(1)
	retVal := self.SetWalkDestination(arg0)
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindPlayerWarp(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Player)
	L.Remove(1)
	arg0Value := L.Get(1)
	arg0 := glua.FromLua(arg0Value).(*position.Absolute)
	L.Remove(1)
	self.Warp(arg0)
	return 0

}

func lBindProfile(L *lua.LState, mod *lua.LTable) {
	mt := L.NewTypeMetatable("impl.Profile")

	L.SetField(mt, "__call", L.NewFunction(lNewProfile))

	L.SetField(mt, "__index", L.SetFuncs(L.NewTable(), ProfileMethods))

	cls := L.NewUserData()
	L.SetField(mod, "Profile", cls)
	L.SetMetatable(cls, mt)
	glua.RegisterType("impl.Profile", mt)
}

func lNewProfile(L *lua.LState) int {
	L.Remove(1)
	arg0Value := L.Get(1)
	arg0 := glua.FromLua(arg0Value).(string)
	L.Remove(1)
	arg1Value := L.Get(1)
	arg1 := glua.FromLua(arg1Value).(string)
	L.Remove(1)
	retVal := NewProfile(arg0, arg1)
	L.Push(glua.ToLua(L, retVal))
	return 1

}

var ProfileMethods = map[string]lua.LGFunction{

	"equipment": lBindProfileEquipment,

	"inventory": lBindProfileInventory,

	"load": lBindProfileLoad,

	"password": lBindProfilePassword,

	"rights": lBindProfileRights,

	"save": lBindProfileSave,

	"skills": lBindProfileSkills,

	"username": lBindProfileUsername,

	"position": lBindPropProfilePosition,
}

func lBindProfileEquipment(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Profile)
	L.Remove(1)
	retVal := self.Equipment()
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindProfileInventory(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Profile)
	L.Remove(1)
	retVal := self.Inventory()
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindProfileLoad(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Profile)
	L.Remove(1)
	arg0Value := L.Get(1)
	arg0 := glua.FromLua(arg0Value).(string)
	L.Remove(1)
	self.Load(arg0)
	return 0

}

func lBindProfilePassword(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Profile)
	L.Remove(1)
	retVal := self.Password()
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindProfileRights(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Profile)
	L.Remove(1)
	retVal := self.Rights()
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindProfileSave(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Profile)
	L.Remove(1)
	retVal := self.Save()
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindProfileSkills(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Profile)
	L.Remove(1)
	retVal := self.Skills()
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindProfileUsername(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Profile)
	L.Remove(1)
	retVal := self.Username()
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindPropProfilePosition(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Profile)
	if L.GetTop() == 2 {
		val := glua.FromLua(L.Get(2)).(*position.Absolute)
		self.SetPosition(val)
		return 0
	}
	L.Push(glua.ToLua(L, self.Position()))
	return 1
}

func lBindSkill(L *lua.LState, mod *lua.LTable) {
	mt := L.NewTypeMetatable("impl.Skill")

	L.SetField(mt, "__call", L.NewFunction(lNewSkill))

	L.SetField(mt, "__index", L.SetFuncs(L.NewTable(), SkillMethods))

	cls := L.NewUserData()
	L.SetField(mod, "Skill", cls)
	L.SetMetatable(cls, mt)
	glua.RegisterType("impl.Skill", mt)
}

func lNewSkill(L *lua.LState) int {
	L.Remove(1)
	arg0Value := L.Get(1)
	arg0 := glua.FromLua(arg0Value).(protocol.SkillId)
	L.Remove(1)
	arg1Value := L.Get(1)
	arg1 := glua.FromLua(arg1Value).(int)
	L.Remove(1)
	retVal := NewSkill(arg0, arg1)
	L.Push(glua.ToLua(L, retVal))
	return 1

}

var SkillMethods = map[string]lua.LGFunction{

	"effective_level": lBindSkillEffectiveLevel,

	"maximum_level": lBindSkillMaximumLevel,

	"experience": lBindPropSkillExperience,

	"level_offset": lBindPropSkillLevelOffset,

	"level_percentage": lBindPropSkillLevelPercentage,
}

func lBindSkillEffectiveLevel(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Skill)
	L.Remove(1)
	retVal := self.EffectiveLevel()
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindSkillMaximumLevel(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Skill)
	L.Remove(1)
	retVal := self.MaximumLevel()
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindPropSkillExperience(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Skill)
	if L.GetTop() == 2 {
		val := glua.FromLua(L.Get(2)).(int)
		self.SetExperience(val)
		return 0
	}
	L.Push(glua.ToLua(L, self.Experience()))
	return 1
}

func lBindPropSkillLevelOffset(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Skill)
	if L.GetTop() == 2 {
		val := glua.FromLua(L.Get(2)).(int)
		self.SetLevelOffset(val)
		return 0
	}
	L.Push(glua.ToLua(L, self.LevelOffset()))
	return 1
}

func lBindPropSkillLevelPercentage(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Skill)
	if L.GetTop() == 2 {
		val := glua.FromLua(L.Get(2)).(int)
		self.SetLevelPercentage(val)
		return 0
	}
	L.Push(glua.ToLua(L, self.LevelPercentage()))
	return 1
}

func lBindSkills(L *lua.LState, mod *lua.LTable) {
	mt := L.NewTypeMetatable("impl.Skills")

	L.SetField(mt, "__call", L.NewFunction(lNewSkills))

	L.SetField(mt, "__index", L.SetFuncs(L.NewTable(), SkillsMethods))

	cls := L.NewUserData()
	L.SetField(mod, "Skills", cls)
	L.SetMetatable(cls, mt)
	glua.RegisterType("impl.Skills", mt)
}

func lNewSkills(L *lua.LState) int {
	L.Remove(1)
	retVal := NewSkills()
	L.Push(glua.ToLua(L, retVal))
	return 1

}

var SkillsMethods = map[string]lua.LGFunction{

	"skill": lBindSkillsSkill,

	"combat_level": lBindPropSkillsCombatLevel,
}

func lBindSkillsSkill(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Skills)
	L.Remove(1)
	arg0Value := L.Get(1)
	arg0 := glua.FromLua(arg0Value).(protocol.SkillId)
	L.Remove(1)
	retVal := self.Skill(arg0)
	L.Push(glua.ToLua(L, retVal))
	return 1

}

func lBindPropSkillsCombatLevel(L *lua.LState) int {
	self := glua.FromLua(L.Get(1)).(*Skills)
	if L.GetTop() == 2 {
		val := glua.FromLua(L.Get(2)).(int)
		self.SetCombatLevel(val)
		return 0
	}
	L.Push(glua.ToLua(L, self.CombatLevel()))
	return 1
}
