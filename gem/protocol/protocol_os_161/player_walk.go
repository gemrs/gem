// NOT Generated by bbc (but should be in future)
package protocol_os_161

import (
	"io"

	"github.com/gemrs/gem/gem/core/encoding"
	"github.com/gemrs/gem/gem/protocol"
)

// +gen define_inbound:"Pkt65,SzVar8"
type InboundPlayerWalk protocol.InboundPlayerWalk

func (struc *InboundPlayerWalk) Decode(buf io.Reader, flags interface{}) {
	decodeWalk(buf, flags, (*protocol.InboundPlayerWalk)(struc), false)
}

// +gen define_inbound:"Pkt6,SzVar8,InboundPlayerWalk"
type InboundPlayerWalkMap protocol.InboundPlayerWalk

func (struc *InboundPlayerWalkMap) Decode(buf io.Reader, flags interface{}) {
	decodeWalk(buf, flags, (*protocol.InboundPlayerWalk)(struc), true)
}

func decodeWalk(buf io.Reader, flags interface{}, struc *protocol.InboundPlayerWalk, mapClick bool) {
	//header := flags.(*PacketHeader)
	var tmp16 encoding.Int16
	var tmp8 encoding.Int8

	tmp16.Decode(buf, encoding.IntLittleEndian|encoding.IntOffset128)
	struc.X = int(tmp16)

	tmp8.Decode(buf, encoding.IntNegate)
	runMode := int(tmp8)
	// FIXME runMode can also be 2 sometimes?
	struc.Running = runMode == 1

	tmp16.Decode(buf, encoding.IntLittleEndian)
	struc.Y = int(tmp16)

	if mapClick {
		// ignore the extra 13 bytes for now
		buf.Read(make([]byte, 13))
	}
}
