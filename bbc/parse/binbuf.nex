/[0-9]+/ {
	var err error
	lval.ival, err = strconv.Atoi(yylex.Text())
	if err != nil {
		yylex.Error(err.Error())
	}
	return tNumber
}

/type/   { return tType }
/string/ { return tStringType }
/byte/   { return tByteType }
/struct/ { return tStruct }
/bitstruct/ { return tBitStruct }
/frame/  { return tFrame }
/bit/    { return tBitsType }

/Fixed/  { return tFrameFixed }
/Var8/   { return tFrameVar8 }
/Var16/  { return tFrameVar16 }

/u?int(8|16|24|32|64)/ {
	var err error
	lval.n, err = ast.ParseIntegerType(yylex.Text())
	if err != nil {
		yylex.Error(err.Error())
	}
	return tIntegerType
}

/Int[a-zA-Z0-9]+/ {
    lval.sval = yylex.Text()
    return tIntegerFlag
}

/[{}\[\]<>,]/ {
	return int(yylex.Text()[0])
}

/[a-zA-Z_]+([0-9a-zA-Z_]+)?/ {
	lval.sval = yylex.Text()
	return tIdentifier
}

/[ \t\n]+/            { /* eat up whitespace */ }
/\/\/[^\n]*/          { /* eat up one-line comments */ }
/\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*\//
                      { /* eat up multi-line comments. ugly but functional regex */ }
/./                   { yylex.Error(fmt.Sprintf("unrecognized character: %v", yylex.Text())) }
//
package parse

import (
	"strconv"
	"fmt"

	"github.com/gemrs/gem/bbc/ast"
)
